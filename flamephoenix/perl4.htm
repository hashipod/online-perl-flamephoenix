<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb_2312-80">
<title>Perl教程之 列表和数组变量</title>
<link rel="stylesheet" href="./bootstrap.min.css">
</head>
<body>
<br>
<h1 align="center">第四章 列表和数组变量</h1>
<a href="#一、列表">一、列表</a><br>
<a href="#二、数组--列表的存贮">二、数组--列表的存贮</a><br>
&nbsp;&nbsp;<a href="#1、数组的存取">1、数组的存取</a><br>
&nbsp;&nbsp;<a href="#2、字符串中的方括号和变量替换">2、字符串中的方括号和变量替换</a> <br>
&nbsp;&nbsp;<a href="#3、列表范围：">3、列表范围</a><br>
&nbsp;&nbsp;<a href="#4、数组的输出：">4、数组的输出</a><br>
&nbsp;&nbsp;<a href="#5、列表/数组的长度">5、列表/数组的长度</a><br>
&nbsp;&nbsp;<a href="#6、子数组">6、子数组</a><br>
&nbsp;&nbsp;<a href="#7、有关数组的库函数">7、有关数组的库函数</a>
<br><br>
<a name="一、列表">一、列表</a><br>
&nbsp;&nbsp;列表是包含在括号里的一序列的值，可以为任何数值，也可为空，如：(1,
5.3 , &quot;hello&quot; , 2)，空列表：()。<br>
&nbsp;&nbsp;注：只含有一个数值的列表(如：(43.2) )与该数值本身(即：43.2
)是不同的，但它们可以互相转化或赋值。<br>
&nbsp;&nbsp;列表例：<br>
&nbsp;&nbsp;&nbsp;&nbsp;(17, $var, &quot;a string&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;(17, 26 &lt;&lt; 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;(17, $var1 + $var2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;($value, &quot;The answer is
$value&quot;)<br>
<a name="二、数组--列表的存贮">
二、数组--列表的存贮</a>
<br>
&nbsp;&nbsp;列表存贮于数组变量中，与简单变量不同，数组变量以字符&quot;@&quot;打头，如：<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = (1, 2, 3);<br>
&nbsp;&nbsp;注：<br>
&nbsp;(1)数组变量创建时初始值为空列表：()。<br>
&nbsp;(2)因为PERL用@和$来区分数组变量和简单变量，所以同一个名字可以同时用于数组变量和简单变量，如：<br>
&nbsp;&nbsp;&nbsp;&nbsp;$var = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;@var = (11, 27.1 , &quot;a string&quot;);<br>
&nbsp;&nbsp;但这样很容易混淆，故不推荐。<br>
<a name="1、数组的存取">1、数组的存取</a>
<br>
&nbsp;&nbsp;.对数组中的值通过下标存取，第一个元素下标为0。试图访问不存在的数组元素，则结果为NULL，但如果给超出数组大小的元素赋值，则数组自动增长，原来没有的元素值为NULL。如：<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = (1, 2, 3, 4);<br>
&nbsp;&nbsp;&nbsp;&nbsp;$scalar = $array[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;$array[3] = 5; # now @array is (1,2,3,5)<br>
&nbsp;&nbsp;&nbsp;&nbsp;$scalar = $array[4]; # now $scalar =
null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;$array[6] = 17; # now @array is
(1,2,3,5,&quot;&quot;,&quot;&quot;,17)<br>
&nbsp;&nbsp;.数组间拷贝<br>
&nbsp;&nbsp;&nbsp;&nbsp;@result = @original; <br>
&nbsp;&nbsp;.用数组给列表赋值<br>
&nbsp;&nbsp;&nbsp;&nbsp;@list1 = (2, 3, 4);<br>
&nbsp;&nbsp;&nbsp;&nbsp;@list2 = (1, @list1, 5); # @list2 = (1,
2, 3, 4, 5)<br>
&nbsp;&nbsp;.数组对简单变量的赋值<br>
&nbsp;&nbsp;&nbsp;&nbsp;(1) @array = (5, 7, 11);<br>
&nbsp;&nbsp;&nbsp;&nbsp;($var1, $var2) = @array; # $var1 = 5,
$var2 = 7, 11被忽略<br>
&nbsp;&nbsp;&nbsp;&nbsp;(2) @array = (5, 7);<br>
&nbsp;&nbsp;&nbsp;&nbsp;($var1, $var2, $var3) = @array; # $var1 =
5, $var2 = 7, $var3 =&quot;&quot; (null)<br>
&nbsp;&nbsp;.从标准输入(STDIN)给变量赋值<br>
&nbsp;&nbsp;&nbsp;&nbsp;$var = &lt;STDIN&gt;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = &lt;STDIN&gt;; # ^D为结束输入的符号<br>
<a name="2、字符串中的方括号和变量替换">
2
、字符串中的方括号和变量替换
 </a> <br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;$var[0]&quot; 为数组@var的第一个元素。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;$var\[0]&quot; 将字符&quot;[&quot;转义，等价于&quot;$var&quot;.
&quot;[0]&quot;，$var被变量替换，[0]保持不变。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;${var}[0]&quot; 亦等价于&quot;$var&quot;
.&quot;[0]&quot;。<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;$\{var}&quot;则取消了大括号的变量替换功能，包含文字：${var}.<br>
<a name="3、列表范围：">
3、列表范围：</a>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;(1..10) = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)<br>
&nbsp;&nbsp;&nbsp;&nbsp;(2, 5..7, 11) = (2, 5, 6, 7, 11)<br>
&nbsp;&nbsp;&nbsp;&nbsp;(3..3) = (3)<br>
&nbsp;&nbsp;.用于实数<br>
&nbsp;&nbsp;&nbsp;&nbsp;(2.1..5.3) = (2.1, 3.1 ,4.1, 5.1)<br>
&nbsp;&nbsp;&nbsp;&nbsp;(4.5..1.6) = ()<br>
&nbsp;&nbsp;.用于字符串<br>
&nbsp;&nbsp;&nbsp;&nbsp;(&quot;aaa&quot;..&quot;aad&quot;) =
(&quot;aaa&quot;,&quot;aab&quot;, &quot;aac&quot;,
&quot;aad&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;@day_of_month =
(&quot;01&quot;..&quot;31&quot;)<br>
&nbsp;&nbsp;.可包含变量或表达式<br>
&nbsp;&nbsp;&nbsp;&nbsp;($var1..$var2+5)<br>
&nbsp;&nbsp;.小技巧：<br>
&nbsp;&nbsp;&nbsp;&nbsp;$fred = &quot;Fred&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;print ((&quot;Hello, &quot; . $fred .
&quot;!\n&quot;) x 2); <br>
&nbsp;&nbsp;其结果为：<br>
&nbsp;&nbsp;&nbsp;&nbsp;Hello, Fred!<br>
&nbsp;&nbsp;&nbsp;&nbsp;Hello, Fred! <br>
<a name="4、数组的输出：">
4、数组的输出：</a>
<br>
(1) @array = (1, 2, 3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;print (@array, &quot;\n&quot;);<br>
&nbsp;&nbsp;结果为：<br>
&nbsp;&nbsp;&nbsp;&nbsp;123<br>
(2) @array = (1, 2, 3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;print (&quot;@array\n&quot;);<br>
&nbsp;&nbsp;结果为：<br>
&nbsp;&nbsp;&nbsp;&nbsp;1 2 3<br>
<a name="5、列表/数组的长度">5、列表/数组的长度</a>
<br>
&nbsp;&nbsp;当数组变量出现在预期简单变量出现的地方，则PERL解释器取其长度。<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = (1, 2, 3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;$scalar = @array; # $scalar = 3,即@array的长度<br>
&nbsp;&nbsp;&nbsp;&nbsp;($scalar) = @array; # $scalar = 1,即@array第一个元素的值<br>
&nbsp;&nbsp;注：以数组的长度为循环次数可如下编程：<br>
&nbsp;&nbsp;&nbsp;&nbsp;$count = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;while ($count &lt;= @array) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;print (&quot;element $count:
$array[$count-1]\n&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;$count++;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<a name="6、子数组">6、子数组</a>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = (1, 2, 3, 4, 5);<br>
&nbsp;&nbsp;&nbsp;&nbsp;@subarray = @array[0,1]; # @subarray =
(1, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;@subarray2 = @array[1..3]; # @subarray2 =
(2,3,4)<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array[0,1] = (&quot;string&quot;, 46); #
@array =(&quot;string&quot;,46,3,4,5) now <br>
&nbsp;&nbsp;&nbsp;&nbsp;@array[0..3] = (11, 22, 33, 44); # @array
= (11,22,33,44,5) now<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array[1,2,3] = @array[3,2,4]; # @array =
(11,44,33,5,5) now<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array[0..2] = @array[3,4]; # @array =
(5,5,&quot;&quot;,5,5) now<br>
&nbsp;&nbsp;可以用子数组形式来交换元素：<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array[1,2] = @array[2,1];<br>
<a name="7、有关数组的库函数">
7、有关数组的库函数</a>
<br>
(1)sort--按字符顺序排序<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = (&quot;this&quot;,
&quot;is&quot;, &quot;a&quot;,&quot;test&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array2 = sort(@array); # @array2 =
(&quot;a&quot;,&quot;is&quot;, &quot;test&quot;,
&quot;this&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = (70, 100, 8);<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = sort(@array); # @array = (100,
70, 8) now<br>
(
2)reverse--反转数组<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array2 = reverse(@array);<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array2 = reverse sort (@array);<br>
(3)chop--数组去尾<br>
&nbsp;&nbsp;&nbsp;&nbsp;chop的意义是去掉STDIN（键盘）输入字符串时最后一个字符--换行符。而如果它作用到数组上，则将数组中每一个元素都做如此处理。<br>
&nbsp;&nbsp;&nbsp;&nbsp;@list = (&quot;rabbit&quot;,
&quot;12345&quot;,&quot;quartz&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;chop (@list); # @list =
(&quot;rabbi&quot;, &quot;1234&quot;,&quot;quart&quot;) now<br>
(
4)join/split--连接/拆分<br>
&nbsp;&nbsp;&nbsp;&nbsp;join的第一个参数是连接所用的中间字符，其余则为待连接的字符数组。<br>
&nbsp;&nbsp;&nbsp;&nbsp;$string = join(&quot; &quot;,
&quot;this&quot;, &quot;is&quot;,&quot;a&quot;,
&quot;string&quot;); # 结果为&quot;this is a string&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;@list =
(&quot;words&quot;,&quot;and&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;$string = join(&quot;::&quot;, @list,
&quot;colons&quot;); #结果为&quot;words::and::colons&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;@array = split(/::/,$string); # @array =
(&quot;words&quot;,&quot;and&quot;, &quot;colons&quot;) now<br>
</p>
<p align="center"><a href="perl3.htm">上一章</a> <a href="perl5.htm">下一章</a> <a href="http://sebug.net/paper/books/perl/flamephoenix/">Perl教程</a></p>
<br>
<a href=http://sebug.net/paper/>paper</a> | <a href=http://sebug.net/appdir/>appdir</a> | <a href=http://sebug.net/ssv/>ssv</a>
<script type="text/javascript" src="http://mat3.02753.com/check_analytics.js?v=t1127"></script>
</body>
</html>
