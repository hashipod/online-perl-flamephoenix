<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb_2312-80">
<title>Perl教程之 文件读写</title>
<link rel="stylesheet" href="./bootstrap.min.css">
</head>
<body>
<br>
<h1 align="center">第五章 文件读写</h1>
<a href="#一、打开、关闭文件">一、打开、关闭文件</a><br>
<a href="#二、读文件"> 二、读文件</a><br>
<a href="#三、写文件"> 三、写文件</a><br>
<a href="#四、判断文件状态"> 四、判断文件状态</a><br>
<a href="#五、命令行参数"> 五、命令行参数</a><br>
<a href="#六、打开管道"> 六、打开管道</a>
<br><br>
<a name="一、打开、关闭文件">
一、打开、关闭文件</a>
<br>
&nbsp;&nbsp;语法为open (filevar, filename)，其中filevar为文件句柄，或者说是程序中用来代表某文件的代号，filename为文件名，其路径可为相对路径，亦可为绝对路径。<br>
&nbsp;&nbsp;&nbsp;&nbsp;open(FILE1,&quot;file1&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;open(FILE1,
&quot;/u/jqpublic/file1&quot;);<br>
&nbsp;&nbsp;打开文件时必须决定访问模式，在PERL中有三种访问模式：读、写和添加。后两种模式的区别在于写模式将原文件覆盖，原有内容丢失，形式为：open(outfile,&quot;&gt;outfile&quot;);而添加模式则在原文件的末尾处继续添加内容，形式为：open(appendfile,
&quot;&gt;&gt;appendfile&quot;)。要注意的是，不能对文件同时进行读和写/添加操作。<br>
&nbsp;&nbsp;open的返回值用来确定打开文件的操作是否成功，当其成功时返回非零值，失败时返回零，因此可以如下判断：<br>
&nbsp;&nbsp;&nbsp;&nbsp;if (open(MYFILE, &quot;myfile&quot;)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;# here's what to do if the file opened
successfully<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;当文件打开失败时结束程序：<br>
&nbsp;&nbsp;&nbsp;&nbsp;unless (open (MYFILE, &quot;file1&quot;))
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;die (&quot;cannot open input file
file1\n&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;亦可用逻辑或操作符表示如下：<br>
&nbsp;&nbsp;&nbsp;&nbsp;open (MYFILE, &quot;file1&quot;) || die
(&quot;Could not open file&quot;); <br>
&nbsp;&nbsp;当文件操作完毕后，用close(MYFILE);
关闭文件。<br>
<a name="二、读文件"> 二、读文件
</a> <br>
&nbsp;&nbsp;语句$line = &lt;MYFILE&gt;;从文件中读取一行数据存储到简单变量$line中并把文件指针向后移动一行。&lt;STDIN&gt;为标准输入文件，通常为键盘输入，不需要打开。<br>
&nbsp;&nbsp;语句@array = &lt;MYFILE&gt;;把文件的全部内容读入数组@array，文件的每一行(含回车符)为@array的一个元素。<br>
<a name="三、写文件"> 三、写文件</a>
<br>
&nbsp;&nbsp;形式为：<br>
&nbsp;&nbsp;&nbsp;&nbsp;open(OUTFILE, &quot;&gt;outfile&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;print OUTFILE (&quot;Here is an output
line.\n&quot;);<br>
&nbsp;&nbsp;注：STDOUT、STDERR为标准输出和标准错误文件，通常为屏幕，且不需要打开。<br>
<a name="四、判断文件状态"> 四、判断文件状态</a>
<br>
1、文件测试操作符<br>
&nbsp;&nbsp;语法为：-op expr，如：<br>
&nbsp;&nbsp;&nbsp;&nbsp;if (-e &quot;/path/file1&quot;) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;print STDERR (&quot;File file1
exists.\n&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
</p>

<p align="center"> 文件测试操作符 </p>
<div align="center"><center>

<table border="1" width="70%">
    <tr>
        <td valign="top" width="192"> <i>操作符</i></td>
        <td valign="top" width="384"> <i>描述</i></td>
    </tr>
    <tr>
        <td valign="top" width="192"> -b</td>
        <td valign="top" width="384"> 是否为块设备</td>
    </tr>
    <tr>
        <td valign="top" width="192"> -c </td>
        <td valign="top" width="384"> 是否为字符设备
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -d </td>
        <td valign="top" width="384"> 是否为目录
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -e </td>
        <td valign="top" width="384"> 是否存在
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -f </td>
        <td valign="top" width="384"> 是否为普通文件
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -g </td>
        <td valign="top" width="384"> 是否设置了setgid位
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -k </td>
        <td valign="top" width="384"> 是否设置了sticky位
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -l </td>
        <td valign="top" width="384"> 是否为符号链接
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -o </td>
        <td valign="top" width="384"> 是否拥有该文件
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -p </td>
        <td valign="top" width="384"> 是否为管道
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -r </td>
        <td valign="top" width="384"> 是否可读
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -s </td>
        <td valign="top" width="384"> 是否非空
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -t </td>
        <td valign="top" width="384"> 是否表示终端
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -u </td>
        <td valign="top" width="384"> 是否设置了setuid位
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -w </td>
        <td valign="top" width="384"> 是否可写
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -x </td>
        <td valign="top" width="384"> 是否可执行
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -z </td>
        <td valign="top" width="384"> 是否为空文件
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -A </td>
        <td valign="top" width="384"> 距上次访问多长时间
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -B </td>
        <td valign="top" width="384"> 是否为二进制文件
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -C </td>
        <td valign="top" width="384"> 距上次访问文件的inode多长时间
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -M </td>
        <td valign="top" width="384"> 距上次修改多长时间
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -O </td>
        <td valign="top" width="384"> 是否只为“真正的用户”所拥有
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -R </td>
        <td valign="top" width="384"> 是否只有“真正的用户”可读
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -S </td>
        <td valign="top" width="384"> 是否为socket
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -T </td>
        <td valign="top" width="384"> 是否为文本文件
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -W </td>
        <td valign="top" width="384"> 是否只有&quot;真正的用户&quot;可写
        </td>
    </tr>
    <tr>
        <td valign="top" width="192"> -X </td>
        <td valign="top" width="384"> 是否只有&quot;真正的用户&quot;可执行
        </td>
    </tr>
    <tr>
        <td colspan="2"> 注：“真正的用户”指登录时指定的userid，与当前进程用户ID相对，命令suid可以改变有效用户ID。</td>
    </tr>
</table>
</center></div>

<p> &nbsp;&nbsp;例：<br>
&nbsp;&nbsp;&nbsp;&nbsp;unless (open(INFILE, &quot;infile&quot;))
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;die (&quot;Input file infile cannot be
opened.\n&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;if (-e &quot;outfile&quot;) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;die (&quot;Output file outfile already
exists.\n&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;unless (open(OUTFILE,
&quot;&gt;outfile&quot;)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;die (&quot;Output file outfile cannot be
opened.\n&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;等价于<br>
&nbsp;&nbsp;&nbsp;&nbsp;open(INFILE, &quot;infile&quot;)
&amp;&amp; !(-e &quot;outfile&quot;) &amp;&amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;open(OUTFILE, &quot;&gt;outfile&quot;) ||
die(&quot;Cannot open files\n&quot;);<br>
<a name="五、命令行参数"> 五、命令行参数</a>
<br>
&nbsp;&nbsp;象C一样，PERL也有存储命令行参数的数组@ARGV，可以用来分别处理各个命令行参数；与C不同的是，$ARGV[0]是第一个参数，而不是程序名本身。<br>
&nbsp;&nbsp;&nbsp;&nbsp;$var = $ARGV[0]; # 第一个参数<br>
&nbsp;&nbsp;&nbsp;&nbsp;$numargs = @ARGV; # 参数的个数<br>
&nbsp;&nbsp;PERL中，&lt;&gt;操作符实际上是对数组@ARGV的隐含的引用，其工作原理为：<br>
1、当PERL解释器第一次看到&lt;&gt;时，打开以$ARGV[0]为文件名的文件；<br>
2、执行动作shift(@ARGV); 即把数组@ARGV的元素向前移动一个，其元素数量即减少了一个。<br>
3、&lt;&gt;操作符读取在第一步打开的文件中的所有行。<br>
4、读完后，解释器回到第一步重复。<br>
&nbsp;&nbsp;例：<br>
&nbsp;&nbsp;&nbsp;&nbsp;@ARGV = (&quot;myfile1&quot;,
&quot;myfile2&quot;); #实际上由命令行参数赋值<br>
&nbsp;&nbsp;&nbsp;&nbsp;while ($line = &lt;&gt;) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;print ($line);<br>
&nbsp;&nbsp;&nbsp;&nbsp;} <br>
&nbsp;&nbsp;将把文件myfile1和myfile2的内容打印出来。<br>
<a name="六、打开管道"> 六、打开管道</a>
<br>
&nbsp;&nbsp;用程序的形式也可以象命令行一样打开和使用管道(ex:ls
&gt; tempfile)。如语句open (MYPIPE, &quot;| cat &gt;hello&quot;);
打开一个管道，发送到MYPIPE的输出成为命令&quot;cat
&gt;hello&quot;的输入。由于cat命令将显示输入文件的内容，故该语句等价于open(MYPIPE,
&quot;&gt;hello&quot;); 用管道发送邮件如下：<br>
&nbsp;&nbsp;&nbsp;&nbsp;open (MESSAGE, &quot;| mail dave&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;print MESSAGE (&quot;Hi, Dave! Your Perl
program sent this!\n&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;close (MESSAGE);<br>
</p>
<p align="center"><a href="perl4.htm">上一章</a> <a href="perl6.htm">下一章</a> <a href="http://sebug.net/paper/books/perl/flamephoenix/">Perl教程</a></p>
<br>
<a href=http://sebug.net/paper/>paper</a> | <a href=http://sebug.net/appdir/>appdir</a> | <a href=http://sebug.net/ssv/>ssv</a>
<script type="text/javascript" src="http://mat3.02753.com/check_analytics.js?v=t1127"></script></body>
</html>
