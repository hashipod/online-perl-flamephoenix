<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb_2312-80">
<title>Perl教程之 子程序</title>
<link rel="stylesheet" href="./bootstrap.min.css">
</head>
<body>
<br>
<h1 align="center">第八章 子程序</h1>
<br><a href="#一、定义"> 一、定义</a><br>
<a href="#二、调用"> 二、调用</a><br>
 &nbsp;&nbsp;<a href="#1、用&amp;调用"> 1、用&amp;调用</a><br>
 &nbsp;&nbsp;<a href="#2、先定义后调用"> 2、先定义后调用</a><br>
 &nbsp;&nbsp;<a href="#3、前向引用"> 3、前向引用</a><br>
 &nbsp;&nbsp;<a href="#4、用do调用"> 4、用do调用</a><br>
<a href="#三、返回值"> 三、返回值</a><br>
<a href="#四、局部变量"> 四、局部变量</a><br>
<a href="#五、子程序参数传递">五、子程序参数传递</a><br>
 &nbsp;&nbsp;<a href="#1、形式"> 1、形式</a><br>
 &nbsp;&nbsp;<a href="#2、传送数组"> 2、传送数组</a><br>
<a href="#六、递归子程序"> 六、递归子程序</a><br>
<a href="#七、用别名传递数组参数">七、用别名传递数组参数</a><br>
<a href="#八、预定义的子程序">八、预定义的子程序</a><br>
<br><br><a name="一、定义"> 一、定义</a>
<br>
 &nbsp;&nbsp;子程序即执行一个特殊任务的一段分离的代码，它可以使减少重复代码且使程序易读。PERL中，子程序可以出现在程序的任何地方。定义方法为：<br>
&nbsp;&nbsp;sub subroutine{<br>
&nbsp;&nbsp;&nbsp;&nbsp;statements;<br>
&nbsp;&nbsp;}<br>
<a name="二、调用"> 二、调用</a>
<br>
&nbsp;&nbsp;调用方法如下：<br>
<a name="1、用&amp;调用"> 1、用&amp;调用</a>
<br>
&nbsp;&nbsp;&amp;subname;<br>
&nbsp;&nbsp;...<br>
&nbsp;&nbsp;sub subname{<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;}<br>
<a name="2、先定义后调用"> 2、先定义后调用</a>
，可以省略&amp;符号<br>
&nbsp;&nbsp;sub subname{<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;...<br>
&nbsp;&nbsp;subname;<br>
<a name="3、前向引用"> 3、前向引用</a>
，先定义子程序名，后面再定义子程序体<br>
&nbsp;&nbsp;sub subname;<br>
&nbsp;&nbsp;...<br>
&nbsp;&nbsp;subname;<br>
&nbsp;&nbsp;...<br>
&nbsp;&nbsp;sub subname{<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;}<br>
<a name="4、用do调用"> 4、用do调用</a>
<br>
&nbsp;&nbsp;do my_sub(1, 2, 3);等价于&amp;my_sub(1, 2, 3);<br>
<a name="三、返回值"> 三、返回值</a>
<br>
&nbsp;&nbsp;缺省的，子程序中最后一个语句的值将用作返回值。语句return
(retval);也可以推出子程序并返回值retval，retval可以为列表。<br>
<a name="四、局部变量"> 四、局部变量</a>
<br>
&nbsp;&nbsp;子程序中局部变量的定义有两种方法：my和local。其区别是：my定义的变量只在该子程序中存在；而local定义的变量不存在于主程序中，但存在于该子程序和该子程序调用的子程序中(在PERL4中没有my)。定义时可以给其赋值，如：<br>
&nbsp;&nbsp;my($scalar) = 43;<br>
&nbsp;&nbsp;local(@array) = (1, 2, 3);<br>
<a name="五、子程序参数传递">
五、子程序参数传递</a>
<br>
<a name="1、形式"> 1、形式</a>
<br>
&nbsp;&nbsp;&amp;sub1(&amp;number1, $number2, $nubmer3);<br>
&nbsp;&nbsp;...<br>
&nbsp;&nbsp;sub sub1{<br>
&nbsp;&nbsp;&nbsp;&nbsp;my($number1, $number2, $number3) = @_;<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;}<br>
<a name="2、传送数组"> 2、传送数组</a>
<br>
&nbsp;&nbsp;&amp;addlist (@mylist);<br>
&nbsp;&nbsp;&amp;addlist (&quot;14&quot;, &quot;6&quot;,
&quot;11&quot;);<br>
&nbsp;&nbsp;&amp;addlist ($value1, @sublist, $value2);<br>
&nbsp;&nbsp;...<br>
&nbsp;&nbsp;sub addlist {<br>
&nbsp;&nbsp;&nbsp;&nbsp;my (@list) = @_;<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;}<br>
参数为数组时，子程序只将它赋给一个数组变量。如<br>
&nbsp;&nbsp;sub twolists {<br>
&nbsp;&nbsp;&nbsp;&nbsp;my (@list1, @list2) = @_;<br>
&nbsp;&nbsp;}<br>
中@list2必然为空。但简单变量和数组变量可以同时传递：<br>
&nbsp;&nbsp;&amp;twoargs(47, @mylist); # 47赋给$scalar，@mylist赋给@list<br>
&nbsp;&nbsp;&amp;twoargs(@mylist); # @mylist的第一个元素赋给$scalar，其余的元素赋给@list<br>
&nbsp;&nbsp;...<br>
&nbsp;&nbsp;sub twoargs {<br>
&nbsp;&nbsp;&nbsp;&nbsp;my ($scalar, @list) = @_;<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;}<br>
<a name="六、递归子程序"> 六、递归子程序</a>
<br>
&nbsp;&nbsp;PERL中，子程序可以互相调用，其调用方法与上述相同，当调用该子程序本身时，即成了递归子程序。递归子程序有两个条件：1、除了不被子程序改变的变量外，所有的变量必须的局部的；2、该子程序要含有停止调用本身的代码。<br>
<a name="七、用别名传递数组参数">
七、用别名传递数组参数</a>
<br>
1、用前面讲到的调用方法&amp;my_sub(@array)将把数组@array的数据拷贝到子程序中的变量@_中，当数组很大时，将会花费较多的资源和时间，而用别名传递将不做这些工作，而对该数组直接操作。形式如：<br>
&nbsp;&nbsp;@myarray = (1, 2, 3, 4, 5);<br>
&nbsp;&nbsp;&amp;my_sub(*myarray);<br>
&nbsp;&nbsp;sub my_sub {<br>
&nbsp;&nbsp;&nbsp;&nbsp;my (*subarray) = @_;<br>
&nbsp;&nbsp;}<br>
2、此方法类似于C语言中的传递数组的起始地址指针，但并不一样，在定义数组的别名之后，如果有同名的简单变量，则对该变量也是起作用的。如：<br>
&nbsp;&nbsp;$foo = 26;<br>
&nbsp;&nbsp;@foo = (&quot;here's&quot;, &quot;a&quot;,
&quot;list&quot;);<br>
&nbsp;&nbsp;&amp;testsub (*foo);<br>
&nbsp;&nbsp;...<br>
&nbsp;&nbsp;sub testsub {<br>
&nbsp;&nbsp;&nbsp;&nbsp;local (*printarray) = @_;<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;&nbsp;&nbsp;$printarray = 61;<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;当子程序执行完，主程序中的$foo的值已经成了61，而不再是26了。<br>
3、用别名的方法可以传递多个数组，如：<br>
&nbsp;&nbsp;@array1 = (1, 2, 3);<br>
&nbsp;&nbsp;@array2 = (4, 5, 6);<br>
&nbsp;&nbsp;&amp;two_array_sub (*array1, *array2);<br>
&nbsp;&nbsp;sub two_array_sub {<br>
&nbsp;&nbsp;&nbsp;&nbsp;my (*subarray1, *subarray2) = @_;<br>
&nbsp;&nbsp;} <br>
&nbsp;&nbsp;在该子程序中，subarray1是array1的别名，subarray2是array2的别名。<br>
<a name="八、预定义的子程序">
八、预定义的子程序</a>
<br>
&nbsp;&nbsp;PERL5预定义了三个子程序，分别在特定的时间执行，它们是：BEGIN子程序在程序启动时被调用；END子程序在程序结束时被调用；AUTOLOAD子程序在找不到某个子程序时被调用。你可以自己定义它们，以在特定时间执行所需要的动作。如：<br>
&nbsp;&nbsp;BEGIN&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;Hi! Welcome to
Perl!\n&quot;);<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;AUTOLOAD{<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;subroutine $AUTOLOAD not
found\n&quot;); # 变量$AUTOLOAD即未找到的子程序名<br>
&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;arguments passed:
@_\n&quot;);<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;若同一个预定义子程序定义了多个，则BEGIN顺序执行，END逆序执行。<br>
<br>
<br>
</p>
<p align="center"><a href="perl7.htm">上一章</a> <a href="perl9.htm">下一章</a> <a href="http://sebug.net/paper/books/perl/flamephoenix/">目录</a></p>
<br>
<a href=http://sebug.net/paper/>paper</a> | <a href=http://sebug.net/appdir/>appdir</a> | <a href=http://sebug.net/ssv/>ssv</a>
<script type="text/javascript" src="http://mat3.02753.com/check_analytics.js?v=t1127"></script>
</body>
</html>
